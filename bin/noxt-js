#!/usr/bin/env node
import fs from 'fs';
import path from 'path';
import minimist from 'minimist';
import yaml from 'js-yaml';
import { startServer } from '../index.js';

const __dirname = path.dirname(new URL(import.meta.url).pathname);

// read deafault config
let config = yaml.load(fs.readFileSync(path.resolve(__dirname, '../default.config.yaml'), 'utf8'));

// read local config if exists
const configPath = 'noxt.config.yaml';
const configFullPath = path.resolve(process.cwd(), configPath);
if (fs.existsSync(configFullPath)) {
  console.log(`Using config file: ${configFullPath}`);
  try {
    const localConfig = yaml.load(fs.readFileSync(configFullPath, 'utf8'));
    Object.assign(config, localConfig);
  } catch (e) {
    console.error(`Error loading config file: ${e.message}`);
    process.exit(1);
  }
} else {
  // guess some defaults based on common project structure
  if (fs.existsSync(path.resolve(process.cwd(), 'views'))) {
    config.views.push('views');
  } 
  if (fs.existsSync(path.resolve(process.cwd(), 'pages'))) {
    config.views.push('pages');
  } 
  if (fs.existsSync(path.resolve(process.cwd(), 'templates'))) {
    config.views.push('templates');
  } 
  if (fs.existsSync(path.resolve(process.cwd(), 'public'))) {
    config.static.push('public');
  }
  if (fs.existsSync(path.resolve(process.cwd(), 'static'))) {
    config.static.push('static');
  }
  if (fs.existsSync(path.resolve(process.cwd(), 'app.js'))) {
    config.context = 'app.js';
  }
}
// override config with command line options
const options = minimist(process.argv.slice(2), {
  string: ['views'],   // treat as strings
  unknown: (arg) => true
});

for (const key in options) {
  if (key === '_') continue; // ignore non-keyed args
  if (!(key in config)) {
    console.warn(`Unknown config option: ${key}`);
    continue;
  }
  config[key] = options[key] ?? config[key];
}

startServer(config).catch(err => {
  console.error(`Error starting server: ${err.message}`);
  console.log(err.stack);
  process.exit(1);
});
